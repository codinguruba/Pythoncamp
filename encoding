
def main():
    print("--- encode ---")
    print(encode("Spiral helix"))
    print(encode("CIAO adios ADIEU")) 
    print(encode("1a2b3c456")) 
    print(encode("Greetings, kids!"))  
    print(encode("Time to learn about weather"))  
    print(encode(123)) 
    print("\n-----------------------")
    print("--- has_same_encoding ---")
    print(has_same_encoding("11", "2")) 
    print(has_same_encoding(11, 2))
    print(has_same_encoding("4e", "43")) 
    print(has_same_encoding("4e", 43)) 
    print(has_same_encoding("sunny", "5unny")) 
    print(has_same_encoding("CI4O", "C1A0"))
    print("\n-----------------------")
    print("--- count_daynight_pairs ---")
    print(count_daynight_pairs([8,2,4,5,9,3])) 
    print(count_daynight_pairs([10,3,10,3,9,9,10,2]))  
    print(count_daynight_pairs([10,3,10,3,10])) 
    print(count_daynight_pairs([1,2,3,4,5,6]))  
    print(count_daynight_pairs([6,5,4,3,2,1])) 
    print("\n-----------------------")
    print("--- classify_temperatures ---")
    print(classify_temperatures(20, 45, [1, 2, 3])) 
    print(classify_temperatures(33, 32, [28, 20, 14, 18, 30, 45, 46]))
    print(classify_temperatures(18, 18, [28, 20, 14, 18, 30, 45, 46])) 
    print(classify_temperatures(10, 25, [17, 19, 19, 18])) 
    print("\n-----------------------")
    print("--- filter_junk ---")
    print(filter_junk([20,23,24,None,20]))
    print(filter_junk([40,40,4,0,40,40])) 
    print(filter_junk([0,"tuesday",0,None])) 
    print(filter_junk([3,4,"wednesday",0,True,5])) 
    print("\n-----------------------")
    print("--- find_biggest_chill ---")
    print(find_biggest_chill([30,28,30,40])) 
    print(find_biggest_chill([30,28,40,30])) 
    print(find_biggest_chill([40,32,30,33,26])) 
    print(find_biggest_chill([18,19,19,20,25])) 
    print(find_biggest_chill([30])) 
    print(find_biggest_chill([30, 30])) 
    print(find_biggest_chill([30,40,35,30,40])) 
    print(find_biggest_chill([100,1])) 
    print(find_biggest_chill([100,0])) 
    print("\n-----------------------")
    print("--- find_biggest_chill_ignoring_junk ---")
    print(find_biggest_chill_ignoring_junk([30,"thirty one",28,30,40])) 
    print(find_biggest_chill_ignoring_junk([100,1])) 
    print(find_biggest_chill_ignoring_junk([100,0]))
    print(find_biggest_chill_ignoring_junk([30,None,0,27])) 
    print("\n-----------------------")
    print("--- longest_heatwave ---")
    print(longest_heatwave(40,[40,41,40,41,41])) 
    print(longest_heatwave(38,[35,36,37,38]))
    print(longest_heatwave(38,[40,42,35,41,43,32])) 
    print(longest_heatwave(38,[40,38]))
    print(longest_heatwave(35,[38])) 
    print(longest_heatwave(40,[38,42,43,39,43,44,45,40,41,42])) 


def encode(s):

    if type(s)!= str:
        return None
        
    encoding_table = str.maketrans({
        'i': '1', 'I': '1',
        'e': '3', 'E': '3',
        'a': '4', 'A': '4',
        'o': '0', 'O': '0'
    })

    return s.translate(encoding_table)
    
    
    
def has_same_encoding(a, b):
   
    if  type(a) != str or type(b) != str:
        return None
        
   
    encoded_a = encode(a)
    encoded_b = encode(b)

    return encoded_a == encoded_b


def count_daynight_pairs(temps):
   
    if len(temps) % 2 != 0:
        return None

    c = 0
    
    for i in range(0, len(temps), 2):
        if temps[i] >= temps[i + 1]:
            c += 1
    
    return c


def classify_temperatures(coldest, hottest, temps):
   
    if coldest > hottest:
        return f"Warning: {coldest} is greater than {hottest}."
    
 
    colder_count = 0
    hotter_count = 0
    normal_count = 0
    
    for temp in temps:
        if temp < coldest:
            colder_count += 1
        elif temp > hottest:
            hotter_count += 1
        else:
            normal_count += 1
    

    
    return (f"{colder_count} days were colder than {coldest}, {hotter_count} days were hotter than {hottest}, and {normal_count} days were normal.")


def filter_junk(temps):
    
    result = []
    for a in temps:
        if isinstance(a, (int, float)) and not isinstance(a, bool) and a != 0:
            result.append(a)
    return result
    


def find_biggest_chill(temps):
    biggest_chill = None  
    
    for i in range(1, len(temps)): 
        if temps[i] < temps[i - 1]:  
            chill_size = temps[i - 1] - temps[i]  
            
            if biggest_chill is None or chill_size > biggest_chill:
                biggest_chill = chill_size
    
    return biggest_chill


def find_biggest_chill_ignoring_junk(temps):
 
    filtered_data = [temp for temp in temps if isinstance(temp, (int, float)) and temp != 0]
    
  
    biggestChill = None
    
    for i in range(1, len(filtered_data)): 
        if filtered_data[i] < filtered_data[i - 1]:   
            chill_size = filtered_data[i - 1] - filtered_data[i]  
            if biggest_chill is None or chill_size > biggest_chill:  
                biggest_chill = chill_size
    
    return biggestChill
    
print(find_biggest_chill_ignoring_junk([100,0])) 


def longest_heatwave(threshold, temps):
    longest = 0 
    cs= 0  
    
    for temp in temps:
        if temp > threshold:
            cs += 1 
            
        else:
            longest = max(longest, cs) 
            cs = 0  
    
    
    longest = max(longest, cs)
    
    return longest
    
    
